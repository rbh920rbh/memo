Added chat.db.codecs.CleanDocumentCodec

Added JsonMode.JSON

JsonMode.java
public enum JsonMode {

    /**
     * Strict mode representations of BSON types conform to the <a href="http://www.json.org">JSON RFC spec</a>.
     */
    STRICT,

    /**
     * While not formally documented, this output mode will attempt to produce output that corresponds to what the MongoDB shell actually
     * produces when showing query results.
     */
    SHELL, 
    /**
     * by Aplomb, used for output pure json string. 
     */
    JSON,
}

JsonWriter.java

	@Override
    protected void doWriteDateTime(final long value) {
        try {
            switch (settings.getOutputMode()) {
                case STRICT:
                    writeStartDocument();
                    writeNameHelper("$date");
                    writer.write(Long.toString(value));
                    writeEndDocument();
                    break;
                case SHELL:
                case JSON:
                    writeNameHelper(getName());

                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'");
                    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                    if (value >= -59014396800000L && value <= 253399536000000L) {
                        writer.write(format("ISODate(\"%s\")", dateFormat.format(new Date(value))));
                    } else {
                        writer.write(format("new Date(%d)", value));
                    }
                    break;
                default:
                    throw new BSONException("Unexpected JSONMode.");
            }
        } catch (IOException e) {
            throwBSONException(e);
        }
    }
    
    @Override
    protected void doWriteInt64(final long value) {
        try {
            switch (settings.getOutputMode()) {
                case STRICT:
                    writeStartDocument();
                    writeNameHelper("$numberLong");
                    writer.write(format("\"%d\"", value));
                    writeEndDocument();
                    break;
                case SHELL:
                    writeNameHelper(getName());
                    if (value >= Integer.MIN_VALUE && value <= Integer.MAX_VALUE) {
                        writer.write(format("NumberLong(%d)", value));
                    } else {
                        writer.write(format("NumberLong(\"%d\")", value));
                    }
                    break;
                case JSON:
                	writeNameHelper(getName());
                    if (value >= Integer.MIN_VALUE && value <= Integer.MAX_VALUE) {
                        writer.write(format("%d", value));
                    } else {
                    	writer.write(format("%d", value));
                    }
                	break;
                default:
                    writeNameHelper(getName());
                    writer.write(Long.toString(value));
                    break;
            }
        } catch (IOException e) {
            throwBSONException(e);
        }
    }
    
    @Override
    public void doWriteObjectId(final ObjectId objectId) {
        try {
            switch (settings.getOutputMode()) {
                case STRICT:
                    writeStartDocument();
                    writeString("$oid", objectId.toString());
                    writeEndDocument();
                    break;
                case SHELL:
                case JSON:
                    writeNameHelper(getName());
                    writer.write(format("ObjectId(\"%s\")", objectId.toString()));
                    break;
                default:
                    throw new BSONException("Unknown output mode" + settings.getOutputMode());
            }
        } catch (IOException e) {
            throwBSONException(e);
        }
    }
    
    @Override
    public void doWriteRegularExpression(final BsonRegularExpression regularExpression) {
        try {
            switch (settings.getOutputMode()) {
                case STRICT:
                    writeStartDocument();
                    writeString("$regex", regularExpression.getPattern());
                    writeString("$options", regularExpression.getOptions());
                    writeEndDocument();
                    break;
                case SHELL:
                case JSON:
                    writeNameHelper(getName());
                    writer.write("/");
                    String escaped = (regularExpression.getPattern().equals("")) ? "(?:)" : regularExpression.getPattern()
                                                                                                             .replace("/", "\\/");
                    writer.write(escaped);
                    writer.write("/");
                    writer.write(regularExpression.getOptions());
                    break;
                default:
                    throw new BSONException("Unknown output mode" + settings.getOutputMode());
            }
        } catch (IOException e) {
            throwBSONException(e);
        }
    }
    
    @Override
    public void doWriteTimestamp(final BsonTimestamp value) {
        try {
            switch (settings.getOutputMode()) {
                case STRICT:
                    writeStartDocument();
                    writeStartDocument("$timestamp");
                    writeInt32("t", value.getTime());
                    writeInt32("i", value.getInc());
                    writeEndDocument();
                    writeEndDocument();
                    break;
                case SHELL:
                case JSON:
                    writeNameHelper(getName());
                    writer.write(format("Timestamp(%d, %d)", value.getTime(), value.getInc()));
                    break;
                default:
                    throw new BSONException("Unknown output mode" + settings.getOutputMode());
            }
        } catch (IOException e) {
            throwBSONException(e);
        }
    }
    
    @Override
    public void doWriteUndefined() {
        try {
            switch (settings.getOutputMode()) {
                case STRICT:
                    writeStartDocument();
                    writeBoolean("$undefined", true);
                    writeEndDocument();
                    break;
                case SHELL:
                case JSON:
                    writeNameHelper(getName());
                    writer.write("undefined");
                    break;
                default:
                    throw new BSONException("Unknown output mode" + settings.getOutputMode());
            }
        } catch (IOException e) {
            throwBSONException(e);
        }
    }